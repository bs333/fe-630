library(tidyverse)
# Function to read the data
read_data <- function(file_path) {
data <- read_delim(file_path, delim = "\t")
return(data)
}
# Function to calculate simple returns
calculate_simple_returns <- function(prices) {
returns <- prices / lag(prices) - 1
returns <- na.omit(returns)  # Remove NA values resulted from lagging
return(returns)
}
# Function to annualize returns
annualize_returns <- function(returns) {
annual_returns <- returns * 252
return(annual_returns)
}
# Function to compute the covariance matrix
compute_covariance_matrix <- function(returns) {
Qts <- cov(returns)
return(Qts)
}
# Set the file path
file_path <- "Midtermdata/data.tsv"
# Step 1: Read in the data
data <- read_data(file_path)
# Assuming the first column is the date, and the rest are the prices
dates <- data[[1]] # Extract the first column as dates
prices <- data[-1] # Remove the first column from the data
# Convert the first column to dates if it's not already
dates <- as.Date(as.character(dates), format="%Y%m%d")
# Step 2 and 3: Convert to simple returns and annualize
daily_returns <- calculate_simple_returns(prices)
annual_returns <- annualize_returns(daily_returns)
# Step 5: Compute the covariance matrix
Qts <- compute_covariance_matrix(annual_returns)
# Step 6: Print out the first five rows and columns of the covariance matrix
Qts[1:5, 1:5]
# Set the file path
file_path <- "Midtermdata/data.tsv"
# Step 1: Read in the data
data <- read_data(file_path)
data
library(tidyverse)
# Function to read the data
read_data <- function(file_path) {
data <- read_csv(file_path)
return(data)
}
# Function to calculate simple returns
calculate_simple_returns <- function(prices) {
returns <- prices / lag(prices) - 1
returns <- na.omit(returns)  # Remove NA values resulted from lagging
return(returns)
}
# Function to annualize returns
annualize_returns <- function(returns) {
annual_returns <- returns * 252
return(annual_returns)
}
# Function to compute the covariance matrix
compute_covariance_matrix <- function(returns) {
Qts <- cov(returns)
return(Qts)
}
# Set the file path
file_path <- "Midtermdata/data.csv" # Assuming the file extension is .csv for comma-delimited files
# Step 1: Read in the data
data <- read_data(file_path)
# Set the file path
file_path <- "Midtermdata/data.csv" # Assuming the file extension is .csv for comma-delimited files
file_path
getwd()
dir
dir()
dir()
library(tidyverse)
# Function to read the data
read_data <- function(file_path) {
data <- read_csv(file_path)
return(data)
}
# Function to calculate simple returns
calculate_simple_returns <- function(prices) {
returns <- prices / lag(prices) - 1
returns <- na.omit(returns)  # Remove NA values resulted from lagging
return(returns)
}
# Function to annualize returns
annualize_returns <- function(returns) {
annual_returns <- returns * 252
return(annual_returns)
}
# Function to compute the covariance matrix
compute_covariance_matrix <- function(returns) {
Qts <- cov(returns)
return(Qts)
}
# Set the file path
file_path <- "Midtermdata/data.csv" # Assuming the file extension is .csv for comma-delimited files
# Step 1: Read in the data
data <- read_data(file_path)
# Assuming the first column is the date, and the rest are the prices
dates <- data[[1]] # Extract the first column as dates
prices <- data[-1] # Remove the first column from the data
# Convert the first column to dates if it's not already
dates <- as.Date(as.character(dates), format="%Y%m%d")
# Step 2 and 3: Convert to simple returns and annualize
daily_returns <- calculate_simple_returns(prices)
dates
prices
# Function to read the data and set the first column as a DateTime index
read_data <- function(file_path) {
# Read the data, assuming the first row is the header
data <- read.csv(file_path, header = TRUE)
# Convert the first column to Date format assuming it's in 'YYYYMMDD' format
# Assuming the first column is named 'Date' or similar; adjust accordingly
data[,1] <- ymd(data[,1])
# Set the first column as row names if needed or keep as a separate Date column
# Optionally, you can make the date column as row names (not always recommended for time series data in R)
# rownames(data) <- data[,1]
# data <- data[,-1]
return(data)
}
# Function to calculate simple returns
calculate_simple_returns <- function(prices) {
returns <- prices / lag(prices) - 1
returns <- na.omit(returns)  # Remove NA values resulted from lagging
return(returns)
}
# Function to annualize returns
annualize_returns <- function(returns) {
annual_returns <- returns * 252
return(annual_returns)
}
# Function to compute the covariance matrix
compute_covariance_matrix <- function(returns) {
Qts <- cov(returns)
return(Qts)
}
# Set the file path
file_path <- "Midtermdata/data.csv" # Assuming the file extension is .csv for comma-delimited files
# Step 1: Read in the data
data <- read_data(file_path)
data
library(tidyverse)
library(lubridate)
# Function to read the data and set the first column as a DateTime index
read_data <- function(file_path) {
# Read the data, assuming the first row is the header
data <- read.csv(file_path, header = TRUE)
# Convert the first column to Date format assuming it's in 'YYYYMMDD' format
# Assuming the first column is named 'Date' or similar; adjust accordingly
data[,1] <- ymd(data[,1])
# Set the first column as row names if needed or keep as a separate Date column
# Optionally, you can make the date column as row names (not always recommended for time series data in R)
# rownames(data) <- data[,1]
# data <- data[,-1]
return(data)
}
# Function to calculate simple returns
calculate_simple_returns <- function(prices) {
returns <- prices / lag(prices) - 1
returns <- na.omit(returns)  # Remove NA values resulted from lagging
return(returns)
}
# Function to annualize returns
annualize_returns <- function(returns) {
annual_returns <- returns * 252
return(annual_returns)
}
# Function to compute the covariance matrix
compute_covariance_matrix <- function(returns) {
Qts <- cov(returns)
return(Qts)
}
file_path <- "Midtermdata/data.csv"
# Read the CSV file, making sure the first row is used as column names
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
data
# Convert the first column (which contains dates) to Date class
# Assuming the date format is 'YYYY-MM-DD'
data[,1] <- as.Date(data[,1])
# Read the CSV file, making sure the first row is used as column names
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Convert the first column (which contains dates) to Date class
# Assuming the date format is 'YYYY-MM-DD'
data[,1] <- as.Date(data[,1])
file_path <- "Midtermdata/data.csv"
# Read the CSV file, making sure the first row is used as column names
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Convert the first column (which contains dates) to Date class
# Assuming the date format is 'YYYY-MM-DD'
data[,1] <- as.Date(data[,1])
# Convert the first column to character, then to Date
data[,1] <- as.Date(as.character(data[,1]), format="%Y%m%d")
file_path <- "Midtermdata/data.csv"
# Read the CSV file, making sure the first row is used as column names.
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Convert the first column to character, then to Date.
data[,1] <- as.Date(as.character(data[,1]), format="%Y%m%d")
# Set the first column as row names.
rownames(data) <- data[,1]
# Set the first column as row names.
rownames(data) <- data[,1]
data
# Convert the first column to character, then to Date.
data[,1] <- as.Date(as.character(data[,1]), format="%Y%m%d")
data
file_path <- "Midtermdata/data.csv"
# Read the CSV file, making sure the first row is used as column names.
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
data
# Rename the first column to "Date"
colnames(data)[1] <- "Date"
data
head(data)
# Read the CSV file, making sure the first row is used as column names.
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Rename the first column to "Date".
colnames(data)[1] <- "Date"
data
# Rename the first column to "Date".
colnames(data)[0] <- "Date"
data
file_path <- "Midtermdata/data.csv"
# Read the CSV file, making sure the first row is used as column names.
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Rename the first column to "Date".
colnames(data)[0] <- "Date"
# Rename the first column to "Date".
colnames(data)[1] <- "Date"
data$Date
# Read the CSV file, making sure the first row is used as column names.
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Rename the first column to "Date".
colnames(data)[1] <- "Date"
data
# Set the value in the first row, first column to "Date"
data[1, 1] <- "Date"
data
# Convert the first column to character, then to Date.
data[,1] <- as.Date(as.character(data[,1]), format="%Y%m%d")
data
# Set the value in the first row, first column to "Date"
data[1, 1] <- "Date"
# Read the CSV file, making sure the first row is used as column names.
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Set the value in the first row, first column to "Date"
data[1, 1] <- "Date"
# Convert the first column to character, then to Date.
data[,1] <- as.Date(as.character(data[,1]), format="%Y%m%d")
data
data <- data[-1, ]
file_path <- "Midtermdata/data.csv"
# Read the CSV file, making sure the first row is used as column names.
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Set the value in the first row, first column to "Date"
data[1, 1] <- "Date"
# Now, use the first row to set column names and remove the first row from the data
colnames(data) <- as.character(unlist(data[1, ]))
data <- data[-1, ]
# # The 'Date' column needs to be converted from factor/character to Date type
# data$Date <- as.Date(as.character(data$Date), format="%Y-%m-%d")
#
#
# # Set the first column as row names.
# rownames(data) <- data[,1]
# data <- data[,-1]
data
file_path <- "Midtermdata/data.csv"
# Read the CSV file, making sure the first row is used as column names.
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Set the value in the first row, first column to "Date"
data[1, 1] <- "Date"
# Now, use the first row to set column names and remove the first row from the data
colnames(data) <- as.character(unlist(data[1, ]))
data <- data[-1, ]
# # The 'Date' column needs to be converted from factor/character to Date type
# data$Date <- as.Date(as.character(data$Date), format="%Y-%m-%d")
#
#
# # Set the first column as row names.
# rownames(data) <- data[,1]
# data <- data[,-1]
data
# Assuming 'data' is your dataframe and 'Date' is the column with dates in YYYYMMDD format
data$Date <- as.Date(as.character(data$Date), format="%Y%m%d")
str(data)
head(data)
file_path <- "Midtermdata/data.csv"
# Read the CSV file, making sure the first row is used as column names.
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Set the value in the first row, first column to "Date"
data[1, 1] <- "Date"
# Now, use the first row to set column names and remove the first row from the data
colnames(data) <- as.character(unlist(data[1, ]))
data <- data[-1, ]
# Assuming 'data' is your dataframe and 'Date' is the column with dates in YYYYMMDD format
data$Date <- as.Date(as.character(data$Date), format="%Y%m%d")
head(data)
# Step 1: Read in the data
file_path <- "Midtermdata/data.csv"
tail(data)
head(data)
head(data)
data
View(data)
head(data)
# Step 2 and 3: Convert to simple returns and annualize
daily_returns <- calculate_simple_returns(prices)
data
# dates <- data[[1]] # Extract the first column as dates
prices <- data[-1] # Remove the first column from the data
# Step 2 and 3: Convert to simple returns and annualize
daily_returns <- calculate_simple_returns(prices)
prices
# Step 2: Calculate Daily Returns
daily_returns <- data[, -1] / lag(data[, -1]) - 1
daily_returns <- daily_returns[-1, ]  # Remove the first row which will be NA
# Step 2: Calculate Daily Returns
daily_returns <- data[, -1] / lag(data[, -1]) - 1
daily_returns <- daily_returns[-1, ]  # Remove the first row which will be NA
daily_returns
# Step 2: Calculate Daily Returns
daily_returns <- data[, -1] / lag(data[, -1]) - 1
# Convert all columns (except the first one which is 'Date') to numeric
data[,-1] <- sapply(data[,-1], as.numeric)
head(data)
# Convert all columns (except the first one which is 'Date') to numeric
data[,-1] <- sapply(data[,-1], as.numeric)
head(data)
# Step 1: Read in the data
file_path <- "Midtermdata/data.csv"
# Read the CSV file, making sure the first row is used as column names.
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Set the value in the first row, first column to "Date"
data[1, 1] <- "Date"
# Now, use the first row to set column names and remove the first row from the data
colnames(data) <- as.character(unlist(data[1, ]))
data <- data[-1, ]
# Assuming 'data' is your dataframe and 'Date' is the column with dates in YYYYMMDD format
data$Date <- as.Date(as.character(data$Date), format="%Y%m%d")
# Convert all columns (except the first one which is 'Date') to numeric
data[,-1] <- sapply(data[,-1], as.numeric)
head(data)
# Step 2: Calculate Daily Returns
daily_returns <- data.frame(lapply(data[,-1], function(x) c(NA, diff(x) / lag(x))))
daily_returns
# Step 1: Read in the data
file_path <- "Midtermdata/data.csv"
# Read the CSV file, making sure the first row is used as column names.
data <- read.csv(file_path, header = TRUE, check.names = FALSE)
# Set the value in the first row, first column to "Date"
data[1, 1] <- "Date"
# Now, use the first row to set column names and remove the first row from the data
colnames(data) <- as.character(unlist(data[1, ]))
data <- data[-1, ]
# Assuming 'data' is your dataframe and 'Date' is the column with dates in YYYYMMDD format
data$Date <- as.Date(as.character(data$Date), format="%Y%m%d")
# Assuming the first column is the date, and the rest are the prices
data[,-1] <- sapply(data[,-1], as.numeric)
head(data)
# Step 2: Calculate Daily Returns
daily_returns <- data[, -1] / lag(data[, -1]) - 1
daily_returns <- daily_returns[-1, ]  # Remove the first row which will be NA
daily_returns
# Step 3: Annualize Returns
annual_returns <- apply(daily_returns, 2, mean, na.rm = TRUE) * 252
annual_returns
# Step 5: Compute Covariance Matrix of Returns
cov_matrix <- cov(daily_returns, use = "pairwise.complete.obs")
# Step 5: Compute Covariance Matrix of Returns
cov_matrix <- cov(daily_returns, use = "pairwise.complete.obs")
# Step 5: Compute Covariance Matrix of Returns
Qts <- cov(daily_returns, use = "pairwise.complete.obs")
# Step 6: Print out the first five rows and columns of the covariance matrix.
print(Qts[1:5, 1:5])
# dates <- data[[1]] # Extract the first column as dates
# prices <- data[-1] # Remove the first column from the data
#
# # Convert the first column to dates if it's not already
# dates <- as.Date(as.character(dates), format="%Y%m%d")
# Step 2: Calculate Daily Returns
daily_returns <- data[, -1] / lag(data[, -1]) - 1
daily_returns <- daily_returns[-1, ]  # Remove the first row which will be NA
# Step 3: Annualize Returns
annual_returns <- apply(daily_returns, 2, mean, na.rm = TRUE) * 252
# Step 4: Extract Index
## Already did in pre-processing.
# Step 5: Compute Covariance Matrix of Returns
Qts <- cov(daily_returns, use = "pairwise.complete.obs")
# Step 6: Print out the first five rows and columns of the covariance matrix.
print(Qts[1:5, 1:5])
# dates <- data[[1]] # Extract the first column as dates
# prices <- data[-1] # Remove the first column from the data
#
# # Convert the first column to dates if it's not already
# dates <- as.Date(as.character(dates), format="%Y%m%d")
# Step 2: Calculate daily returns.
daily_returns <- data[, -1] / lag(data[, -1]) - 1
daily_returns <- daily_returns[-1, ]  # Remove the first row which will be NA.
# Step 3: Annualize the daily returns.
annual_returns <- apply(daily_returns, 2, mean, na.rm = TRUE) * 252
# Step 4: Extract the index column.
## Already did in pre-processing.
# Step 5: Compute the covariance matrix of daily returns.
Qts <- cov(daily_returns, use = "pairwise.complete.obs")
# Step 6: Print out the first five rows and columns of the covariance matrix.
print(Qts[1:5, 1:5])
# dates <- data[[1]] # Extract the first column as dates
# prices <- data[-1] # Remove the first column from the data
#
# # Convert the first column to dates if it's not already
# dates <- as.Date(as.character(dates), format="%Y%m%d")
# Step 2: Calculate daily returns.
daily_returns <- data[, -1] / lag(data[, -1]) - 1
daily_returns <- daily_returns[-1, ]  # Remove the first row which will be NA.
# Step 3: Annualize the daily returns.
annual_returns <- apply(daily_returns, 2, mean, na.rm = TRUE) * 252
# Step 4: Extract the index column.
## Already did in pre-processing.
# Step 5: Compute the covariance matrix of daily returns.
Qts <- cov(daily_returns, use = "pairwise.complete.obs")
# Step 6: Print out the first five rows and columns of the covariance matrix.
print(Qts[1:5, 1:5])
print(daily_returns)
print(head(daily_returns)
print(head(daily_returns))
print(head(daily_returns)
print(head(daily_returns))
print(annual_returns)
# dates <- data[[1]] # Extract the first column as dates
# prices <- data[-1] # Remove the first column from the data
#
# # Convert the first column to dates if it's not already
# dates <- as.Date(as.character(dates), format="%Y%m%d")
# Step 2: Calculate daily returns.
daily_returns <- data[, -1] / lag(data[, -1]) - 1
daily_returns <- daily_returns[-1, ]  # Remove the first row which will be NA.
print(head(daily_returns))
# Step 3: Annualize the daily returns.
annual_returns <- apply(daily_returns, 2, mean, na.rm = TRUE) * 252
print(annual_returns)
# Step 4: Extract the index column.
## Already did in pre-processing.
# Step 5: Compute the covariance matrix of daily returns.
Qts <- cov(daily_returns, use = "pairwise.complete.obs")
# Step 6: Print out the first five rows and columns of the covariance matrix.
print(Qts[1:5, 1:5])
# dates <- data[[1]] # Extract the first column as dates
# prices <- data[-1] # Remove the first column from the data
#
# # Convert the first column to dates if it's not already
# dates <- as.Date(as.character(dates), format="%Y%m%d")
# Step 2: Calculate daily returns.
daily_returns <- data[, -1] / lag(data[, -1]) - 1
daily_returns <- daily_returns[-1, ]  # Remove the first row which will be NA.
print(head(daily_returns))
# Step 3: Annualize the daily returns.
annual_returns <- apply(daily_returns, 2, mean, na.rm = TRUE) * 252
print(annual_returns)
# Step 4: Extract the index column.
## Already did in pre-processing.
# Step 5: Compute the covariance matrix of daily returns.
Qts <- cov(daily_returns, use = "pairwise.complete.obs")
# Step 6: Print out the first five rows and columns of the covariance matrix.
print(Qts[1:5, 1:5])
